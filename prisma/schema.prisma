// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// generator zod {
//   provider                 = "zod-prisma"
//   output                   = "./zod" // (default) the directory where generated zod schemas will be saved

//   relationModel            = true // (default) Create and export both plain and related models.
//   // relationModel         = "default" // Do not export model without relations.
//   // relationModel         = false // Do not generate related model

//   modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//   // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//   modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

//   // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//   useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//   imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

//   // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//   prismaJsonNullability    = false // (default) uses prisma's scheme for JSON field nullability
//   // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  firstname String  
  lastname  String  
  email     String      @unique
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  quizzes   Quiz[]

  sessions Session[]
  accounts Account[]

  @@map("users")
}

type Answer {
  answer    String
  isCorrect Boolean
}

type Question {
  question  String
  answers   Answer[]
}

model Quiz {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String

  questions Question[]

  private   Boolean     @default(false)

  subject   Subject?    @relation(fields: [subjectId], references: [id])
  subjectId String?     @db.ObjectId @map("subject_id")

  creatorId String      @db.ObjectId @map("creator_id")
  creator   User        @relation(fields: [creatorId], references: [id])

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("quizzes")
}

model Subject {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique

  quizzes   Quiz[]

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("subjects")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String     @id @default(auto()) @map("_id") @db.ObjectId
  token      String     @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}